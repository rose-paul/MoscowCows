{"version":3,"sources":["webpack:///webpack/bootstrap 7cfb3dd337369af9fe3c","webpack:///./src/mskcows.js","webpack:///./src/moving_cow.js","webpack:///./src/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA;;AAEA,+BAA8B,0DAA0D;AACxF,+BAA8B,6DAA6D;AAC3F,+BAA8B,8DAA8D;AAC5F,+BAA8B,+DAA+D;AAC7F;AACA;AACA;AACA;;AAEA;;AAEA,EAAC,C;;;;;;ACnBD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;;;AAIA,4B;;;;;;ACrCA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7cfb3dd337369af9fe3c","const MovingCow = require('./moving_cow')\n\nwindow.MovingCow = MovingCow;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const el = document.getElementById('game-canvas');\n    const ctx = el.getContext('2d');\n\n    let cow1 = new MovingCow({ pos: [50, 50], vel: [15, 15], radius: 5, color: 'brown' })\n    let cow2 = new MovingCow({ pos: [100, 100], vel: [20, 100], radius: 5, color: 'brown' })\n    let cow3 = new MovingCow({ pos: [200, 200], vel: [300, 500], radius: 5, color: 'brown' })\n    let cow4 = new MovingCow({ pos: [1000, 400], vel: [150, 200], radius: 5, color: 'brown' })\n    cow1.draw(ctx)\n    cow2.draw(ctx)\n    cow3.draw(ctx)\n    cow4.draw(ctx)\n    \n    console.log('in add event listener')\n\n})\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mskcows.js\n// module id = 0\n// module chunks = 0","const Util = require('./util')\n\nfunction MovingCow(data) {\n    this.pos = data.pos;\n    this.vel = data.vel;\n    this.radius = data.radius;\n    this.color = data.color\n    const img = new Image();\n    img.src = '../images/cow.png';\n    this.sprite = img;\n    // this.vel = Util.randomVec(15);\n}\n\nMovingCow.prototype.draw = function(ctx) {\n    ctx.fillStyle = this.color;\n    this.sprite.addEventListener('load', e => {\n        ctx.drawImage(this.sprite, 37, 71);\n    })\n}\n\nMovingCow.prototype.move = function() {\n  if (this.pos[0] > 1300) {\n    this.pos[0] = 0;\n  } else if (this.pos[0] < 0) {\n    this.pos[0] = 1300;\n  }\n  if (this.pos[1] > 800) {\n    this.pos[1] = 0;\n  } else if (this.pos[1] < 0) {\n    this.pos[1] = 800;\n  }\n  this.pos[0] = (this.pos[0] + this.vel[0]) % 1300;\n  this.pos[1] = (this.pos[1] + this.vel[1]) % 800;\n};\n\n\n\nmodule.exports = MovingCow;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/moving_cow.js\n// module id = 1\n// module chunks = 0","const Util = {\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  }\n};\n\nmodule.exports = Util;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/util.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}